#pragma kernel TestEvaluate
#pragma kernel TestSplit
#pragma kernel TestCrop
#pragma kernel TestRaycast

#include "../../Ist/Foundation/Shaders/Math.cginc"
#include "../../Ist/Foundation/Shaders/Geometry.cginc"
#include "../../Ist/Foundation/Shaders/BezierPatch.cginc"
#include "../../Ist/Foundation/Shaders/BezierPatchIntersection.cginc"

struct Vertex
{
    float3 vertex;
    float3 normal;
};

struct TestEvaluateData
{
    BezierPatch bp;
};

struct TestSplitData
{
    BezierPatch bp;
    BezierPatch dst[4];
    float2 uv;
};

struct TestCropData
{
    BezierPatch bp;
    BezierPatch dst;
    float2 uv0;
    float2 uv1;
};

struct TestRaycastData
{
    BezierPatch bp;
    float4x4 trans;
    Ray ray;
    float zmin;
    float zmax;
    BezierPatchHit hit;
    float3 hit_pos;
    float3 hit_normal;
    BezierPatch dst;
    float4x4 zalign;
};

RWStructuredBuffer<Vertex>              _Vertices;
RWStructuredBuffer<TestEvaluateData>    _TestEvaluateData;
RWStructuredBuffer<TestSplitData>       _TestSplitData;
RWStructuredBuffer<TestCropData>        _TestCropData;
RWStructuredBuffer<TestRaycastData>     _TestRaycastData;


[numthreads(1,1,1)]
void TestEvaluate(uint3 dtid : SV_DispatchThreadID)
{
    uint i = dtid.x;


    float span = 1.0 / 15;
    float2 uv = float2(
        span * (i % 16),
        span * (i / 16)
    );
    BezierPatch bp = _TestEvaluateData[0].bp;
    _Vertices[i].vertex = BPEvaluate(bp, uv);
    _Vertices[i].normal = BPEvaluateNormal(bp, uv);
}


[numthreads(1,1,1)]
void TestSplit(uint3 dtid : SV_DispatchThreadID)
{
    BPSplit(
        _TestSplitData[0].bp,
        _TestSplitData[0].dst[0], _TestSplitData[0].dst[1], _TestSplitData[0].dst[2], _TestSplitData[0].dst[3],
        _TestSplitData[0].uv);
}


[numthreads(1,1,1)]
void TestCrop(uint3 dtid : SV_DispatchThreadID)
{
    BPCrop(_TestCropData[0].bp, _TestCropData[0].dst, _TestCropData[0].uv0, _TestCropData[0].uv1);
}


[numthreads(1,1,1)]
void TestRaycast(uint3 dtid : SV_DispatchThreadID)
{
    BezierPatch bp = _TestRaycastData[0].bp;
    BPTransform(bp, _TestRaycastData[0].trans);
    Ray ray = _TestRaycastData[0].ray;
    float zmin = _TestRaycastData[0].zmin;
    float zmax = _TestRaycastData[0].zmax;
    BezierPatchHit hit;

    BPIRaycast(bp, ray, zmin, zmax, 0.01, hit);
    _TestRaycastData[0].hit = hit;
    _TestRaycastData[0].hit_pos = BPEvaluate(bp, float2(hit.u, hit.v));
    _TestRaycastData[0].hit_normal = BPEvaluateNormal(bp, float2(hit.u, hit.v));
}

