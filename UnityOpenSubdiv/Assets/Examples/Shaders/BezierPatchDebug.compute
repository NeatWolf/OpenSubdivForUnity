#pragma kernel TestEvaluate
#pragma kernel TestRaycast

#include "../../Ist/Foundation/Shaders/Math.cginc"
#include "../../Ist/Foundation/Shaders/Geometry.cginc"
#include "../../Ist/Foundation/Shaders/BezierPatch.cginc"
#include "../../Ist/Foundation/Shaders/BezierPatchIntersection.cginc"

struct Vertex
{
    float3 vertex;
    float3 normal;
};

struct TestEvaluateData
{
    BezierPatch bp;
    //float3 bp[16];
};

struct TestRaycastData
{
    Ray ray;
    BezierPatch bp;
    float4x4 trans;
    float zmin;
    float zmax;
    BezierPatchHit hit;
    float3 hit_pos;
    float3 hit_normal;
};

RWStructuredBuffer<Vertex>              _Vertices;
StructuredBuffer<TestEvaluateData>      _TestEvaluateData;
RWStructuredBuffer<TestRaycastData>     _TestRaycastData;


[numthreads(1,1,1)]
void TestEvaluate(uint3 dtid : SV_DispatchThreadID)
{
    uint i = dtid.x;


    float span = 1.0 / 15;
    float2 uv = float2(
        span * (i % 16),
        span * (i / 16)
    );
    BezierPatch bp = _TestEvaluateData[0].bp;
    _Vertices[i].vertex = BPEvaluate(bp, uv);
    _Vertices[i].normal = BPEvaluateNormal(bp, uv);

    //_Vertices[i].vertex = float3(uv.x, 0.0, uv.y);
}

[numthreads(1,1,1)]
void TestRaycast(uint3 dtid : SV_DispatchThreadID)
{
    Ray ray = _TestRaycastData[0].ray;
    BezierPatch bp = _TestRaycastData[0].bp;
    BPTransform(bp, _TestRaycastData[0].trans);
    float zmin = _TestRaycastData[0].zmin;
    float zmax = _TestRaycastData[0].zmax;
    BezierPatchHit hit;

    BPIRaycast(bp, ray, zmin, zmax, hit);
    _TestRaycastData[0].hit = hit;
    _TestRaycastData[0].hit_pos = BPEvaluate(bp, float2(hit.u, hit.v));
    _TestRaycastData[0].hit_normal = BPEvaluateNormal(bp, float2(hit.u, hit.v));
}
